@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazorGoogleAuth.Model
@using MudBlazorGoogleAuth.Services
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

@if (!_isAuthenticated)
{
    <MudCard>
        <MudCardContent Style="padding-bottom: 5px">
            <MudText>To load your account you need to login</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@SignInWithGoogle">Login via Google</MudButton>
        </MudCardActions>
    </MudCard>
}
else
{
    <MudCard>
        <MudCardHeader Style="padding-bottom: 5px">
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Welcome @_user?.FirstName</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Style="padding-top: 5px">
            <MudText>This information is stored in the database:</MudText>
            <MudText Typo="Typo.body2"> In the UserTable</MudText>
            <MudText Typo="Typo.body2">Id: @_user.Id</MudText>
            <MudText Typo="Typo.body2">Firstname: @_user.FirstName</MudText>
            <MudText Typo="Typo.body2">Lastname: @_user.LastName</MudText>
            <MudText Typo="Typo.body2">Email: @_user.Email</MudText>
            <MudText Typo="Typo.body2">In the AccountLink</MudText>
            <MudText Typo="Typo.body2">ProviderId: @_accountLink?.Id</MudText>
            <MudText Typo="Typo.body2">UserId: @_accountLink?.UserId</MudText>
        </MudCardContent>
    </MudCard>
}

@code {
    private bool _isAuthenticated;
    private User? _user;
    private AccountLink? _accountLink;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await CreateOrLoadUser(authState);
    }

    public async Task CreateOrLoadUser(AuthenticationState authState)
    {
        string? nameIdentifier = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (nameIdentifier is null)
        {
            return;
        }

        if (await UserService.GetUserByProviderIdAsync(nameIdentifier) is null)
        {
            Guid userId = Guid.NewGuid();
            User user = new User()
            {
                Id = userId,
                Email = authState.User.FindFirst(ClaimTypes.Email)?.Value,
                FirstName = authState.User.FindFirst(ClaimTypes.GivenName)?.Value ?? string.Empty,
                LastName = authState.User.FindFirst(ClaimTypes.GivenName)?.Value ?? string.Empty,
            };
            _accountLink = new AccountLink()
            {
                Id = nameIdentifier,
                UserId = userId
            };
            await UserService.CreateAsync(user, _accountLink);
        }
        _user = await UserService.GetUserByProviderIdAsync(nameIdentifier);
        _accountLink = await UserService.GetAccountLinkByIdAsync(nameIdentifier);
        _isAuthenticated = _user is not null;
    }

    private void SignInWithGoogle()
    {
        NavigationManager.NavigateTo("/api/Auth/login-google", forceLoad: true);
    }

}
