@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazorGoogleAuth.Model
@using MudBlazorGoogleAuth.Services
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

@if (!_isAuthenticated)
{
    <h3>Login</h3>
    <div class="card">
        <div class="card-body">
            <button class="btn btn-primary" @onclick="SignInWithGoogle">
                Sign in with Google
            </button>
        </div>
    </div>
}
else
{
    <div class="d-flex align-items-center gap-3">
        <div>
            <p class="m-0 fw-bold">Welcome, @_user?.FirstName</p>
            <small> @_user.Email</small>
        </div>
    </div>
}

@code {
    private string _message = string.Empty;
    private bool _isAuthenticated;
    private string? _userName;
    private string? _email;
    private User? _user;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await CreateOrLoadUser(authState);
    }

    public async Task CreateOrLoadUser(AuthenticationState authState)
    {
        string? nameIdentifier = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (nameIdentifier is null)
        {
            return;
        }

        if (await UserService.GetUserByProviderIdAsync(nameIdentifier) is null)
        {
            Guid userId = Guid.NewGuid();
            User user = new User()
            {
                Id = userId,
                Email = authState.User.FindFirst(ClaimTypes.Email)?.Value,
                FirstName = authState.User.FindFirst(ClaimTypes.GivenName)?.Value ?? string.Empty,
                LastName = authState.User.FindFirst(ClaimTypes.GivenName)?.Value ?? string.Empty,
            };
            AccountLink accountLink = new AccountLink()
            {
                Id = nameIdentifier,
                UserId = userId
            };
            await UserService.CreateAsync(user, accountLink);
        }
        _user = await UserService.GetUserByProviderIdAsync(nameIdentifier);
        _isAuthenticated = _user is not null;
    }

    private void SignInWithGoogle()
    {
        _message = "Redirecting to Google …";
        NavigationManager.NavigateTo("/api/Auth/login-google", forceLoad: true);
    }

}
